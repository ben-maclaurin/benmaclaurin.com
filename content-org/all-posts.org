#+startup: indent
#+startup: logdone
#+hugo_base_dir: ../
#+options: author:nil

* DONE About
CLOSED: [2022-11-19 Sat 13:20]
:PROPERTIES:
:EXPORT_HUGO_SECTION: about
:EXPORT_OPTIONS: toc:0
:EXPORT_FILE_NAME: index
:END:

** About

Hello. I'm a UI designer and developer based in Edinburgh. I currently
work at [[https://mawla.agency/][Mawla]]. I spend most of my time in [[https://www.typescriptlang.org/][TypeScript]], [[https://elixir-lang.org/][Elixir]] and
[[https://www.rust-lang.org/][Rust]]. I occasionally write some [[https://en.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp]], too!

You can find me on:

- [[https://github.com/ben-maclaurin][GitHub]]
- [[https://open.spotify.com/user/7b6zfcpl3rva2qryhwjyycrsv?si=ad1a6fa2e97a4a9c][Spotify]]
- [[https://www.are.na/parsing-thoughts][Are.na]]
- [[https://sr.ht/~benmaclaurin/][sourcehut]]

You can also reach me on: contact@benmaclaurin.com

* TODO Designers can be hackers, too  
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_OPTIONS: toc:2
:EXPORT_FILE_NAME: designers-can-be-hackers-too
:END:

Revisiting Eric Raymond's [[http://www.catb.org/~esr/faqs/hacker-howto.html][How to become a Hacker]], I am reminded that designers can be hackers, too. It is worth clarifying that I do not refer to the criminal conduct commonly associated with the term. Rather, I set out to discuss a traditional form of hacking, aptly captured by the following quote:

#+begin_quote
/"There is another group of people who loudly call themselves hackers, but aren't. These are people (mainly adolescent males) who get a kick out of breaking into computers and phreaking the phone system. Real hackers call these people ‘crackers’ and want nothing to do with them."/ 
#+end_quote

#+begin_center
-- Eric S. Raymond
#+end_center

But I realised that the hacker philosophy need not be constrained to software development. Hackers are fundamentally tinkerers, who include anyone curious to create things, breaking things and understand things. That includes just about everyone!

I started my career as a designer. 

#+begin_quote
/There is a good chance parts of this post are incorrect. I'm always keen to update my ideas, so if you disagree with anything, I'd be grateful if you could [[mailto:contact@benmaclaurin.com][reach out via email]]./
#+end_quote

* DONE Fast motions with avy and evil
CLOSED: [2022-10-30 Sun 00:49]
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_OPTIONS: toc:2
:EXPORT_FILE_NAME: fast-motions-with-avy-and-evil 
:END:

I have discovered a beautifully versatile motion technique via avy
with evil mode. Both packages are admirable in their own right. avy
brings [[https://github.com/abo-abo/avy][char-based decision tree jumping]] to the buffer, and evil is [[https://github.com/emacs-evil/evil][an
extensible vi layer]] for Emacs. Combining them, however, feels /magic/.

** How it works
Below is some elisp from my init file:

#+begin_src lisp 
(global-set-key (kbd "C-x .") (lambda () (interactive) (dired "~/.emacs.d/")))
#+end_src

What if I want to delete from the beginning of the line to the end of
~(interactive)~?

Maybe ~df)~? No. That would give me:

#+begin_src lisp 
 (lambda () (interactive) (dired "~/.emacs.d/")))
#+end_src

Instead, I could count the occurences of ~)~ up until the termination
point (there are 3 in this case). ~d3f)~ would give me want I want:

#+begin_src lisp
 (dired "~/.emacs.d/")))
#+end_src

With avy, this becomes delightfully simple. We no longer need to count
the occurences of a character. Instead, the following key combination
will work:

1. ~d~ for delete
2. ~C-;~ which is my custom keybinding for ~avy-goto-char~
3. ~<char>~ where ~<char>~ is the target char
4. ~<avy char>~ which is the character in the visual decision tree
   which represents our target

Here is a screenshot of step 3:

[[file:avy-demo.png]]

In the example screenshot I would press ~d~ as this is the character
that corresponds to the termination point.

So, in /approximately/ the same number of actions we achieved
comparable behaviour without the additional cognitive load of having
to count character occurences.

Before I switched to Emacs, I tried to set this up with [[https://github.com/ggandor/leap.nvim][leap]] in Neovim
but couldn't get it to work properly.

#+begin_quote
/There is a good chance parts of this post are incorrect. I'm always keen to update my ideas, so if you disagree with anything, I'd be grateful if you could [[mailto:contact@benmaclaurin.com][reach out via email]]./
#+end_quote

* Rust: Trait Objects and the Newtype Pattern
** Introduction
I built a simple Hacker News wrapper in Rust to learn about API design
principles. Along the way I also discovered the [[https://rust-unofficial.github.io/patterns/patterns/behavioural/newtype.html][Newtype pattern]] which
provides type safety and encapsulation. The following post is a
summary of learnings:

I set a small challenge of building a wrapper around the Hacker News
API. To keep the project simple and focus on the goal of studying
idiomatic Rust, I only aggregated the top stories (i.e. frontpage
matter) and ignored all other site categories (polls, jobs, etc.).

** Understanding the data structure
- Stories can have /many/ children
- Comments can have /many/ children
- Comments can have /only one/ parent

Both sotries and comments are "items". You may be able to spot a
simple rule here:

- Stories are /always/ parents. Comments can be either parents /or/ children.

** Defining the item type
First, I defined the item type. 





