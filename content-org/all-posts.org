#+startup: indent
#+startup: logdone
#+hugo_base_dir: ../
#+options: author:nil

* Rust: Trait Objects and the Newtype Pattern
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_FILE_NAME: rust-trait-objects-and-newtype-pattern
:END:

** Introduction
I built a simple Hacker News wrapper in Rust to learn about API design principles. Along the way I also discovered the [[https://rust-unofficial.github.io/patterns/patterns/behavioural/newtype.html][Newtype pattern]] which provides type safety and encapsulation. The following post is a summary of learnings:

I set a small challenge of building a wrapper around the Hacker News API. To keep the project simple and focus on the goal of studying idiomatic Rust, I only aggregated the top stories (i.e. frontpage matter) and ignored all other site categories (polls, jobs, etc.).

** Understanding the data structure
- Stories can have /many/ children
- Comments can have /many/ children
- Comments can have /only one/ parent

Both sotries and comments are "items". You may be able to spot a simple rule here:

- Stories are /always/ parents. Comments can be either parents /or/ children.

** Defining the item type
First, I defined the item type. 


* DONE Emacs configuration
CLOSED: [2022-10-29 Sat 18:07]
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_FILE_NAME: init-el-file
:END:

This page documents the contents of my init.el file and associated packages for [[https://www.gnu.org/software/emacs/][GNU Emacs]].

** Vanilla mods
This section documents the modifications I have made to the vanilla GNU Emacs distribution.

*** Archives
These lines initialise the package archives.

#+begin_src lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

(unless (package-installed-p 'use-package)
   (package-install 'use-package))
#+end_src

*** Interface
The following lines make several modifications to the default Emacs interface. These are designed to make the display less cluttered with more room for the buffer.

#+begin_src lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

*** Typeface
This line sets the editor font size and face. I use [[https://gitlab.com/protesilaos/iosevka-comfy][Iosevka Comfy]] by Protesilaos Stavrou.

#+begin_src lisp
  (set-face-attribute 'default nil :font "Iosevka Comfy" :height 195)
#+end_src

*** Meta key

The following line remaps the Emacs meta ~M~ modifier to the slightly more erognomic macOS command key.

#+begin_src lisp
  (setq mac-command-modifier 'meta)
#+end_src

*** Quickly open Emacs config

This line opens the ~emacs.d~ directory with ~C-x .~

#+begin_src lisp
  (global-set-key (kbd "C-x .") (lambda () (interactive) (dired "~/.emacs.d/")))
#+end_src

*** Cursor type
Change the cursor type to bar, as I prefer it in non-modal editors.

#+begin_src lisp
  (setq-default cursor-type 'bar)
#+end_src

** Packages
External packages which I have installed and customised.

*** magit
The [[https://magit.vc/][magit]] package is an interface for Git inside Emacs. I use it for all Git-related operations.

I have bound ~C-x m~ to ~magit-status~ for quicker access to Magit:

#+begin_src lisp
  (global-set-key (kbd "C-x m") 'magit-status)
#+end_src

*** eglot
[[https://github.com/joaotavora/eglot][eglot]] is an Emacs client for LSP (Language Server Protocol) servers. When ~M-x eglot~ is executed inside a file, Eglot attempts to find the associated LSP and run it.

*** tree-sitter-mode
Enables ~tree-sitter-mode~ globally. Treesitter is an incremental parsing library. 

#+begin_src lisp
  (global-tree-sitter-mode)
#+end_src

*** rust-mode
Instantiates a major mode for the [[https://www.rust-lang.org/][Rust programming language]]. 

#+begin_src lisp
  (require 'rust-mode)
#+end_src

*** ef-themes
I use the accessible ~ef-themes~ collection by [[https://protesilaos.com/][Protesilaos Stavrou]]. 

#+begin_src lisp
  (load-theme 'ef-summer)
#+end_src

*** ox-hugo
~ox-hugo~ provides a convenient way to export Org files to Hugo-compatible markdown. It is used in the generation of [[https://ben-maclaurin.github.io/][my personal blog]].

#+begin_src lisp
  (with-eval-after-load 'ox
  (require 'ox-hugo))
#+end_src
