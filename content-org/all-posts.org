#+startup: indent
#+startup: logdone
#+hugo_base_dir: ../
#+options: author:nil

* DONE Emacs config
CLOSED: [2022-11-04 Fri 20:20]
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_OPTIONS: toc:2
:EXPORT_FILE_NAME: emacs-configuration
:END:

This is a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] page, documenting my GNU 'Emacs
configuration. ~org-babel-tangle~ is used to output the resulting
~init.el~ file. The source of this file can be viewed [[https://github.com/ben-maclaurin/ben-maclaurin.github.io/blob/main/content-org/all-posts.org#emacs-config][here]].

** Setup Processes
Tasks and operations that are required for the rest of the expressions
to run.

*** Archives
The following lines initialise the package archives.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package
Less verbose package definitions and management...

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package command-log-mode)
#+end_src

** Core Modifications
A series of QOL changes I have made to the default distribution.

*** Display
Reduce clutter and noise in the default Emacs GUI (e.g. hides scroll
bar and menu bar).

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)	 
  (tool-bar-mode -1)	 
  (menu-bar-mode -1)	 
#+end_src

*** Meta key
Remap the Emacs meta (M) modifier to the macOS command key for
improved ergonomics and comfort.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq mac-command-modifier 'meta)
#+end_src

*** Font
Set the default font size and face. 

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 170)
#+end_src

*** Open this file
Keybinding to enable swift modification of this file.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x .") (lambda () (interactive) (find-file "~/Developer/ben-maclaurin.github.io/content-org/all-posts.org")))
#+end_src

Once edits have been made, ~org-babel-tangle~ can be executed with
~C-c C-v t~, followed by ~C-x r .~ to reload ~init.el~:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x r .") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))
#+end_src

*** Org
A set of configurations extending the [[https://orgmode.org/][org major mode]].

**** org-capture-templates
~org-capture~ is a helpful utility which enables the quick collation
of thoughts/ideas/tasks (and their contexts).

I have specified the following templates and keybindings:

**** org-agenda
Keybinding for org-agenda mode:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda)))
#+end_src

*** Movement mnemonics
Two motion mnemonics inspired by ~C-n~ and ~C-p~ which jump eight
lines (plus or minus depending on direction):

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "M-n") (lambda () (interactive) (next-line 8)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (previous-line 8)))
#+end_src

*** Visual line mode
Keybinding to toggle visual-line-mode for buffer wrapping:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x v l") (lambda () (interactive) (visual-line-mode 'toggle)))
#+end_src

*** Org agenda files location
Set the location for agenda files:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq org-agenda-files '("~/org/task.org"))
#+end_src

*** Line numbers
Enable relative line numbers in editors.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-display-line-numbers-mode)
#+end_src

** Packages
External packages I have installed.

*** tree-sitter
An incremental tree parsing package that provides syntax
highlighting. The lines below install ~tree-sitter~ and enable the
mode globally.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** rust-mode
Major mode support for the Rust programming language.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package rust-mode
      :config
    (require 'rust-mode))
#+end_src

*** ef-themes
A beautiful and accessible collection of themes by Prot Stavrou.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package ef-themes
      :config
    (load-theme 'ef-light))
#+end_src

*** ox-hugo
~ox-hugo~ provides org export support for Hugo-compatible markdown (it
powers this blog).

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package ox-hugo
      :config
    (with-eval-after-load 'ox
      (require 'ox-hugo)))
#+end_src

*** magit
~magit~ is an interface for Git. ~C-x m~ is bound to ~magit-status~
for ease-of-access:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package magit
      :config
    (global-set-key (kbd "C-x m") 'magit-status))
#+end_src

*** avy

This package uses char-based decision trees for optimal buffer
navigation. ~C-;~ is bound to ~avy-goto-char~:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package avy
      :config
    (global-set-key (kbd "C-;") 'avy-goto-char))
#+end_src

*** ivy
An advanced completion mechanism. Includes helpful prompts for
commands, dired, swiper and more...

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package counsel)

  (use-package ivy
      :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (global-set-key (kbd "C-q") 'counsel-git-grep)
#+end_src

*** swiper
Better search:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package swiper)
  (global-set-key "\C-s" 'swiper)
#+end_src

*** vertico
Vertico is a performant and minimalistic completion tool which extends the default Emacs UI. I use it as an Ivy replacement.

#+begin_src lisp :tangle ~/.emacs.d/init.el
    (use-package vertico
        :init
      (vertico-mode)
      (setq vertico-count 20))
  
    ;; Configure directory extension.
    (use-package vertico-directory
        :after vertico
        :ensure nil
        ;; More convenient directory navigation commands
        :bind (:map vertico-map
                    ("RET" . vertico-directory-enter)
                    ("DEL" . vertico-directory-delete-char)
                    ("M-DEL" . vertico-directory-delete-word))
        ;; Tidy shadowed file names
        :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

#+end_src

*** marginalia
Provides rich descriptions next to minibuffer completions.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package marginalia
      :init
    (marginalia-mode))
#+end_src

*** counsel
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package counsel)
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-q") 'counsel-git-grep)
  (global-set-key (kbd "C-c g") 'counsel-git)

#+end_src
*** elfeed
Serves RSS feeds. The following lines define my subscription list:

#+begin_src lisp :tangle ~/.emacs.d/init.el
                            (use-package elfeed
                                :config
                              (setq elfeed-feeds
                                    '("https://ben-maclaurin.github.io/index.xml"
                                      "https://ciechanow.ski/atom.xml"
                                      "https://fasterthanli.me/index.xml"
                                      "https://hnrss.org/frontpage"
                                      "https://nitter.net/hlissner/rss"
                                      "https://nitter.net/karpathy/rss"
                                      "https://nitter.net/aratramba/rss"
                                      "https://nitter.net/ohhdanm/rss"
                                      "https://lexfridman.com/feed/podcast/"
                                      "https://nitter.net/ukutaht/rss"
                                      "https://nitter.net/chris_mccord/rss"
                                      "https://nitter.net/josevalim/rss"
                                      "https://nitter.net/jonhoo/rss"
                                      "https://nitter.net/rich_harris/rss")))
#+end_src

~C-x w~ launches elfeed:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

Keybinding to update the feeds:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x u") 'elfeed-update)
#+end_src

*** embark
Enables a set of quick access commands around the point:

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package embark
      :config
    (global-set-key (kbd "C-.") (lambda () (interactive) (embark-act))))
#+end_src

*** which-key
A minor mode that provides prompts and tips around an incomplete key
sequence:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package which-key
      :config
    (require 'which-key)
    (which-key-mode))
#+end_src

*** org-roam
Org-based knowledge management system.

#+begin_src lisp :tangle ~/.emacs.d/init.el
      (use-package org-roam
          :ensure t
          :custom
          (org-roam-directory (file-truename "~/org/roam"))
          :bind (("C-c n l" . org-roam-buffer-toggle)
                 ("C-c n f" . org-roam-node-find)
                 ("C-c n g" . org-roam-graph)
                 ("C-c n i" . org-roam-node-insert)
                 ("C-c n c" . org-roam-capture)
                 ("C-c n j" . org-roam-dailies-capture-today))
          :config
          (org-roam-setup))
#+end_src

*** eglot
An LSP client... tries to match a locally-installed LSP with the current buffer:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package eglot)
#+end_src

*** org-bullets
Renders nice bullet point UTF characters to replace org headline stars:

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
    (use-package org-bullets
        :config
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** expand-region
Increase a selection by a set of semantic units.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package expand-region
      :bind ("C-." . 'er/expand-region))
#+end_src

*** company-mode
A completions helper. Improves on the existing eglot completion mechanism:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package company
      :config
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** evil-mode
Vim emulation for Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (unless (package-installed-p 'evil)
    (package-install 'evil))
  (setq evil-want-C-u-scroll t) 
  (require 'evil)
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (evil-mode 1)
#+end_src

*** key-chord
Switch to normal mode by pressing ~j~ and ~k~ in quick succession.

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package key-chord
      :config
    (setq key-chord-two-keys-delay 0.3)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (key-chord-mode 1))
#+end_src

*** meow
A modal editor.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("x" . meow-delete)
   '("X" . meow-backward-delete)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-open-below)
   '("O" . meow-open-above)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("d" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("/" . meow-visit)
   '("e" . meow-mark-word)
   '("E" . meow-mark-symbol)
   '("v" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
#+end_src

I have swapped ~w~ and ~e~. I have also mapped ~O~ and ~o~ to new line above and below respectively. This is so I don't
completely lose my Vim muscle memory.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package meow
      :config
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1))
#+end_src

Register a new inner bound for <> tags:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (meow-thing-register 'tag '(pair (">") ("<")) '(pair (">") ("<")))
  (add-to-list 'meow-char-thing-table '(?a . tag))
#+end_src


*** typescript-mode
Adds Typescript support to Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package typescript-mode
      :after tree-sitter
      :config
      ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
      ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
      (define-derived-mode typescriptreact-mode typescript-mode
        "TypeScript TSX")

      ;; use our derived mode for tsx files
      (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
      ;; by default, typescript-mode is mapped to the treesitter typescript parser
      ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
      (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

#+end_src

*** aphelia
Auto formatting for TS documents.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;; auto-format different source code files extremely intelligently
  ;; https://github.com/radian-software/apheleia
  (use-package apheleia
      :ensure t
      :config
      (apheleia-global-mode +1))

#+end_src

*** vterm

Better terminal emulation:

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package vterm
      :ensure t)
#+end_src

*** doom-themes
#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package doom-themes)
#+end_src

*** kaolin-themes
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package kaolin-themes)
#+end_src
*** go-mode
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package go-mode)
#+end_src
* DONE Fast motions with avy and evil
CLOSED: [2022-10-30 Sun 00:49]
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_OPTIONS: toc:2
:EXPORT_FILE_NAME: fast-motions-with-avy-and-evil 
:END:

I have discovered a beautifully versatile motion technique via avy
with evil mode. Both packages are admirable in their own right. avy
brings [[https://github.com/abo-abo/avy][char-based decision tree jumping]] to the buffer, and evil is [[https://github.com/emacs-evil/evil][an
extensible vi layer]] for Emacs. Combining them, however, feels /magic/.

** How it works
Below is some elisp from my init file:

#+begin_src lisp 
(global-set-key (kbd "C-x .") (lambda () (interactive) (dired "~/.emacs.d/")))
#+end_src

What if I want to delete from the beginning of the line to the end of
~(interactive)~?

Maybe ~df)~? No. That would give me:

#+begin_src lisp 
 (lambda () (interactive) (dired "~/.emacs.d/")))
#+end_src

Instead, I could count the occurences of ~)~ up until the termination
point (there are 3 in this case). ~d3f)~ would give me want I want:

#+begin_src lisp
 (dired "~/.emacs.d/")))
#+end_src

With avy, this becomes delightfully simple. We no longer need to count
the occurences of a character. Instead, the following key combination
will work:

1. ~d~ for delete
2. ~C-;~ which is my custom keybinding for ~avy-goto-char~
3. ~<char>~ where ~<char>~ is the target char
4. ~<avy char>~ which is the character in the visual decision tree
   which represents our target

Here is a screenshot of step 3:

[[file:avy-demo.png]]

In the example screenshot I would press ~d~ as this is the character
that corresponds to the termination point.

So, in /approximately/ the same number of actions we achieved
comparable behaviour without the additional cognitive load of having
to count character occurences.

Before I switched to Emacs, I tried to set this up with [[https://github.com/ggandor/leap.nvim][leap]] in Neovim
but couldn't get it to work properly.

** Watch the video
#+begin_export html
<iframe width="100%" height="315" src="https://www.youtube.com/embed/FiLgoZgaqYo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
#+end_export


* Rust: Trait Objects and the Newtype Pattern
** Introduction
I built a simple Hacker News wrapper in Rust to learn about API design
principles. Along the way I also discovered the [[https://rust-unofficial.github.io/patterns/patterns/behavioural/newtype.html][Newtype pattern]] which
provides type safety and encapsulation. The following post is a
summary of learnings:

I set a small challenge of building a wrapper around the Hacker News
API. To keep the project simple and focus on the goal of studying
idiomatic Rust, I only aggregated the top stories (i.e. frontpage
matter) and ignored all other site categories (polls, jobs, etc.).

** Understanding the data structure
- Stories can have /many/ children
- Comments can have /many/ children
- Comments can have /only one/ parent

Both sotries and comments are "items". You may be able to spot a
simple rule here:

- Stories are /always/ parents. Comments can be either parents /or/ children.

** Defining the item type
First, I defined the item type. 




